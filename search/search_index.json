{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ferramenta de Gerenciamento do Amazon S3","text":"<p>Esta \u00e9 uma ferramenta/produto de gerenciamento de buckets S3, instancias de armazenamento, com templates terraform tipo como se fosse um \"google drive\". </p> <p>Com esta ferramenta, ser\u00e1  poss\u00edvel criar-se novos buckets no S3, gerenciar suas permiss\u00f5es de acesso, cria\u00e7\u00e3o de folders, cria\u00e7\u00e3o de pol\u00edticas. Ser\u00e1 poss\u00edvel tamb\u00e9m a listagem de buckets na conta do usu\u00e1rios, objetos em um bucket especificado, configura\u00e7\u00f5es de lifecycle. </p> <p>Por fim, pretende-se a cria\u00e7\u00e3o de uma simples interface web que possibilite o upload de objetos no bucket, assim como listagem,  download e exclus\u00e3o destes caso seja do desejo do usu\u00e1rio. Notifica\u00e7\u00e3o para saber qual bucket foi modificado.</p>"},{"location":"#pre-requisitos","title":"Pr\u00e9 requisitos","text":"<p>Para execu\u00e7\u00e3o adequada deste roteiro, s\u00e3o necess\u00e1rios os seguintes pr\u00e9-requisitos:</p> <ul> <li>Ubuntu &gt; 20.0 ou WSL2</li> <li>Terraform</li> <li>Python &gt; 3.6</li> <li>Conta na AWS com usu\u00e1rio com permiss\u00f5es de administrador</li> </ul>"},{"location":"#recursos-essenciais-da-ferramenta","title":"Recursos essenciais da ferramenta","text":""},{"location":"#aws","title":"AWS","text":"<p>\u00c9 uma plataforma de servi\u00e7os de computa\u00e7\u00e3o em nuvem oferecida pela Amazon, que permite que indiv\u00edduos e organiza\u00e7\u00f5es implementem aplicativos, servi\u00e7os e infraestrutura na nuvem. A AWS oferece uma ampla variedade de servi\u00e7os em nuvem, incluindo computa\u00e7\u00e3o, armazentamento, banco de dados, an\u00e1lise, intelig\u00eancia artificial, machine learning e muito mais.</p> <p>Para conseguir interagir com os servi\u00e7os e fun\u00e7\u00f5es que a AWS prov\u00e9m, por meio de IaC (Infrastructure as Code), \u00e9 necess\u00e1rio obter chaves de acesso, que permitam o gerenciamento e provisionamento dos recursos que desejamos alocar na nuvem.</p> <p>De posse de suas respectivas chaves de acesso, crie duas vari\u00e1veis de ambiente, conforme padr\u00e3o abaixo:</p> <p><pre><code>export AWS_ACCESS_KEY_ID=&lt;ID_CHAVE_DE_ACESSO&gt;\nexport AWS_SECRET_ACCESS_KEY=&lt;CHAVE_SECRETA_DE_ACESSO&gt;\n</code></pre> Realiza-se o acesso a essas chaves para seguran\u00e7a de dados de quem acessa, pois assim evita-se sempre ter que colocar a senha no ambiente e a senha estar exposta</p>"},{"location":"#s3","title":"S3","text":"<p>\u00c9 um servi\u00e7o de armanezamento de objetos oferecido pela Amazon Web Services (AWS). O S3 permite que os usu\u00e1rios armazenem e recuperem arquivos de qualquer lugar da web. O S3 \u00e9 amplamente utilizado por empresas e organiza\u00e7\u00f5es de diferentes setores para armazenamento e compartilhamento de arquivos, backup e arquivamento de dados, hospedagem de sites e aplicativos, e muito mais.</p>"},{"location":"#bucket","title":"Bucket","text":"<p>Bucket \u00e9 um conceito de armazenamento usado em servi\u00e7os de armazenamento em nuvem, como o Amazon S3. Um bucket pode ser considerado como um cont\u00eainer de objetos, que pode armazenar e gerenciar v\u00e1rios objetos, como arquivos, imagens, v\u00eddeos, entre outros. Os buckets s\u00e3o amplamente utilizados para hospedar sites est\u00e1ticos, armazenamento de backup, arquivamento de dados e muito mais. Eles s\u00e3o uma parte essencial de muitos servi\u00e7os em nuvem e permitem que os usu\u00e1rios armazenem, gerenciem e acessem dados de qualquer lugar da web.</p>"},{"location":"#terraform","title":"Terraform","text":"<p>\u00c9 uma infraestrutura que descreve os recursos que voc\u00ea deseja provisionar, como servidores, banco de dados e outros. Al\u00e9m disso, voc\u00ea pode usar o Terraform para criar, alterar e destruir recursos automaticamente.</p>"},{"location":"#s3-events","title":"S3 Events","text":"<p>O Amazon S3 Events permite que voc\u00ea monitore altera\u00e7\u00f5es em seu bucket do Amazon S3 e responda essas altera\u00e7\u00f5es executando a\u00e7\u00f5es autom\u00e1ticas. Quando um evento ocorre em seu bucket como upload de um arquivo ou a exclus\u00e3o de um objeto o S3 Events pode acusar uma a\u00e7\u00e3o autom\u00e1tica como a invoca\u00e7\u00e3o de uma fun\u00e7\u00e3o AWS Lambda ou a notifica\u00e7\u00e3o de um t\u00f3pico do Amazon Simple Notificacion Service (SNS).</p>"},{"location":"#funcao-aws-lambda","title":"Fun\u00e7\u00e3o AWS Lambda","text":"<p>As Fun\u00e7\u00f5es AWS Lambda fazem o processamento de eventos em tempo real como logs e notifica\u00e7\u00f5es. Por exemplo, voc\u00ea pode criar uma fun\u00e7\u00e3o lambda que \u00e9 acionada sempre que um novo objeto \u00e9 enviado para um bucket do Amazon S3. A fun\u00e7\u00e3o pode processar o objeto, extrair informa\u00e7\u00f5es relevantes, executar transforma\u00e7\u00f5es ou armazenar dados em outros servi\u00e7o. </p>"},{"location":"#amazon-simple-notification-service-sns","title":"Amazon Simple Notification Service (SNS)","text":"<p>O SNS \u00e9 um servi\u00e7o de mensagens e notifica\u00e7\u00e3o da AWS que permite enviar mensagens para diferentes tipos de endpoints como emails, mensagens de texto(SMS), URLs entre outros. Al\u00e9m disso, voc\u00ea pode configurar o acesso para quem pode publicar e para quem pode se inscrever no t\u00f3pico.</p>"},{"location":"#cloudwatch-alarm","title":"CloudWatch Alarm","text":"<p>O CloudWatch Alarm \u00e9 um servi\u00e7o de monitoramento e observabilidade da AWS. O CloudWatch Alarm permite monitorar m\u00e9tricas espec\u00edficas e acionar a\u00e7\u00f5es autom\u00e1ticas com base em condi\u00e7\u00f5es predefinidas.</p>"},{"location":"#iniciando-nossa-infraestrutura","title":"Iniciando nossa infraestrutura","text":"<p>Crie uma pasta para organizar nossos arquivos chamada terraform/::</p> <pre><code>mkdir terraform cd terraform\n</code></pre> <p>Como nosso primeiro objetivo \u00e9 criar um bucket na AWS crie um template chamado s3.tf com o seguinte conte\u00fado:</p> s3.tf<pre><code>#Provider and default region used\nprovider \"aws\" {\nregion     = \"us-east-2\"\n}\nresource \"aws_s3_bucket\" \"exemplo\" {\nbucket = \"&lt;Nome do bucket&gt;\"\ntags = {\nName        = \"My bucket\"\nEnvironment = \"Dev\"\n}\n}\n</code></pre> <p> Subistitua o nome do bucket pelo que voc\u00ea deseja, lembrando que esse nome \u00e9 \u00fanico em toda AWS</p> <p>Inicie ent\u00e3o os recursos terraform necess\u00e1rios para provisionar rodando o comando abaixo:</p> <pre><code>terraform init\n</code></pre> <p>Agora veremos o plano de cria\u00e7\u00e3o desses recursos:</p> <pre><code>terraform plan\n</code></pre> <p>Por fim, realize deploy deste recurso na nuvem:</p> <pre><code>terraform apply -auto-approve\n</code></pre> <p>Caso tudo d\u00ea certo voc\u00ea ver\u00e1 isso no console da AWS</p>"},{"location":"#como-subir-um-site-estatico-por-terraform","title":"Como subir um site est\u00e1tico por Terraform","text":"<p>Agora que j\u00e1 conseguimos subir um bucket privado de uso geral, podemos tamb\u00e9m modificar nossa infraestrutura para provisionar buckets que disponibilizem p\u00e1ginas est\u00e1ticas, conforme nosso plano de infraestrutura. Para isso, devemos...</p> <ul> <li>Fazer um provedor de nuvem da AWS</li> <li>Especificar o recurso que se quer criar : um bucket</li> <li>Define-se os controles do bucket</li> <li>Definir os acesso publico pra tirar esse bloqueio do </li> <li>Definir qual o acesso do bucket</li> <li>Definir uma nova configura\u00e7\u00e3o de bucket</li> <li>Pol\u00edtica de acesso a leitura do bucket</li> <li>Configura\u00e7\u00f5es e buckets de indexar pagina </li> </ul> s3.tf<pre><code>provider \"aws\" {\nregion = \"us-east-1\" # Substitua pela regi\u00e3o desejada\n}\nresource \"aws_s3_bucket\" \"website\" {\nbucket = \"bucketdanivinhaprojeto21\"\n}\nresource \"aws_s3_bucket_ownership_controls\" \"example\" {\nbucket = aws_s3_bucket.website.id\nrule {\nobject_ownership = \"BucketOwnerPreferred\"\n}\n}\nresource \"aws_s3_bucket_public_access_block\" \"example\" {\nbucket = aws_s3_bucket.website.id\nblock_public_acls       = false\nblock_public_policy     = false\nignore_public_acls      = false\nrestrict_public_buckets = false\n}\nresource \"aws_s3_bucket_acl\" \"example\" {\ndepends_on = [\naws_s3_bucket_ownership_controls.example,\naws_s3_bucket_public_access_block.example,\n]\nbucket = aws_s3_bucket.website.id\nacl    = \"public-read\"\n}\nresource \"aws_s3_bucket_versioning\" \"website\" {\nbucket = aws_s3_bucket.website.id\nversioning_configuration {\nstatus = \"Enabled\"\n}\n}\ndata \"aws_caller_identity\" \"current\" {}\nresource \"aws_s3_bucket_policy\" \"public_read_access\" {\nbucket = aws_s3_bucket.website.id\npolicy = data.aws_iam_policy_document.public_read_access.json\n}\ndata \"aws_iam_policy_document\" \"public_read_access\" {\nstatement {\nprincipals {\ntype = \"*\"\nidentifiers = [\"*\"]\n}\nactions = [\n\"s3:GetObject\",\n\"s3:ListBucket\",\n]\nresources = [\naws_s3_bucket.website.arn,\n\"${aws_s3_bucket.website.arn}/*\",\n]\n}\n}\nresource \"aws_s3_bucket_website_configuration\" \"website\" {\nbucket = aws_s3_bucket.website.bucket\nindex_document {\nsuffix = \"index.html\"\n}\n}\nresource \"aws_s3_object\" \"index_page\" {\nbucket       = aws_s3_bucket.website.id\nkey          = \"index.html\"\ncontent_type = \"text/html; charset=UTF-8\"\nsource       = \"index.html\"\n} </code></pre> <p>Na mesma pasta crie um arquivo chamado index.html e coloque o seguinte conte\u00fado nele:</p> <pre><code>&lt;h1&gt;Hello World&lt;/h1&gt;\n</code></pre> <p>Inicie ent\u00e3o os recursos terraform necess\u00e1rios para provisionar rodando o comando abaixo:</p> <pre><code>terraform init\n</code></pre> <p>Agora veremos o plano de cria\u00e7\u00e3o desses recursos:</p> <pre><code>terraform plan\n</code></pre> <p>Por fim, realize deploy deste recurso na nuvem:</p> <pre><code>terraform apply -auto-approve\n</code></pre> <p>Caso tudo d\u00ea certo voc\u00ea ver\u00e1 isso no console da AWS</p> <p>E a pagina voc\u00ea ver\u00e1 isso</p> <p>Fica disponibilizado o link em que voc\u00ea pode verificar:</p> <pre><code>http://bucketdanivinhaprojeto21.s3-website-us-east-1.amazonaws.com\n</code></pre>"},{"location":"#como-subir-uma-notificacao-sns-terraform","title":"Como subir uma notifica\u00e7\u00e3o SNS Terraform","text":"<p>Crie uma pasta no terraform chamada sns e dentro da pasta crie um arquivo sns.tf </p> <pre><code>resource \"aws_sns_topic\" \"example_topic\" {\n  name = \"example-topic\"\n}\n\nvariable \"email_subscription\" {\n  type    = string\n  default = \"niveaadl@al.insper.edu.br\" # Insira o endere\u00e7o de e-mail para sobregrava\u00e7\u00e3o aqui\n}\n\nresource \"aws_sns_topic_subscription\" \"email_subscription\" {\n  topic_arn = aws_sns_topic.example_topic.arn\n  protocol  = \"email\"\n  endpoint  = var.email_subscription\n}\n\noutput \"sns_arn\" {\n  value = aws_sns_topic.example_topic.arn\n}\n</code></pre>"},{"location":"#como-subir-um-lambda-por-terraform","title":"Como subir um lambda por Terraform","text":"<p>Crie uma pasta no terraform chamada lambda e dentro da pasta crie um arquivo lambda.tf </p> <pre><code>resource \"aws_lambda_function\" \"example\" {\n  function_name = \"events\"\n  runtime = \"python3.8\"\n  handler = \"events.lambda_handler\"\n  role = aws_iam_role.lambda.arn\n\n  filename = \"lambda/events.zip\"\n\n  environment {\n    variables = {\n      EXAMPLE_VARIABLE = \"example_value\"\n    }\n  }\n}\n\nresource \"aws_iam_role\" \"lambda\" {\n  name = \"a1s3-events-execution-lambda\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"lambda.amazonaws.com\"\n        }\n      }\n    ]\n  })\n}\n\nresource \"aws_iam_role_policy_attachment\" \"lambda\" {\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n  role       = aws_iam_role.lambda.name\n}\n\noutput \"function_name\" {\n  value = aws_lambda_function.example.function_name\n}\n\noutput \"function_arn\" {\n  value = aws_lambda_function.example.arn\n}\n</code></pre>"},{"location":"#como-fazer-cloudwatch-por-terraform","title":"Como fazer CloudWatch por terraform","text":""}]}